
GP_Drivers_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006a8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000830  08000830  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000830  08000830  00010830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000834  08000834  00010834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  08000838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
  7 .bss          0000001c  20000024  20000024  00020024  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000040  20000040  00020024  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 10 .debug_info   000010a2  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000428  00000000  00000000  000210f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000140  00000000  00000000  00021520  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000128  00000000  00000000  00021660  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000007fb  00000000  00000000  00021788  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000074b  00000000  00000000  00021f83  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000226ce  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000388  00000000  00000000  0002274c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00022ad4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000818 	.word	0x08000818

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08000818 	.word	0x08000818

080001c8 <GPIO_PeriClockControl>:



//void GPIO_PeriClockControl(GPIO_regdef_t *pGPIOx,uint8_t EnorDi)
static void GPIO_PeriClockControl(uint8_t PORT_num,uint8_t EnCLK)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	460a      	mov	r2, r1
 80001d2:	71fb      	strb	r3, [r7, #7]
 80001d4:	4613      	mov	r3, r2
 80001d6:	71bb      	strb	r3, [r7, #6]
	switch(EnCLK)
 80001d8:	79bb      	ldrb	r3, [r7, #6]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d01b      	beq.n	8000216 <GPIO_PeriClockControl+0x4e>
 80001de:	2b01      	cmp	r3, #1
 80001e0:	d000      	beq.n	80001e4 <GPIO_PeriClockControl+0x1c>
				break;
			}
		}
		break;
	}
}
 80001e2:	e032      	b.n	800024a <GPIO_PeriClockControl+0x82>
		for(char i=0; i<NUM_OF_GPIO; i++)          //new
 80001e4:	2300      	movs	r3, #0
 80001e6:	73fb      	strb	r3, [r7, #15]
 80001e8:	e011      	b.n	800020e <GPIO_PeriClockControl+0x46>
			if(i == PORT_num)
 80001ea:	7bfa      	ldrb	r2, [r7, #15]
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	429a      	cmp	r2, r3
 80001f0:	d10a      	bne.n	8000208 <GPIO_PeriClockControl+0x40>
				GPIO_PCLK_EN |= (1 << PORT_num);
 80001f2:	4919      	ldr	r1, [pc, #100]	; (8000258 <GPIO_PeriClockControl+0x90>)
 80001f4:	4b18      	ldr	r3, [pc, #96]	; (8000258 <GPIO_PeriClockControl+0x90>)
 80001f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f8:	79fa      	ldrb	r2, [r7, #7]
 80001fa:	2001      	movs	r0, #1
 80001fc:	fa00 f202 	lsl.w	r2, r0, r2
 8000200:	4313      	orrs	r3, r2
 8000202:	630b      	str	r3, [r1, #48]	; 0x30
				break;
 8000204:	bf00      	nop
		break;
 8000206:	e020      	b.n	800024a <GPIO_PeriClockControl+0x82>
		for(char i=0; i<NUM_OF_GPIO; i++)          //new
 8000208:	7bfb      	ldrb	r3, [r7, #15]
 800020a:	3301      	adds	r3, #1
 800020c:	73fb      	strb	r3, [r7, #15]
 800020e:	7bfb      	ldrb	r3, [r7, #15]
 8000210:	2b08      	cmp	r3, #8
 8000212:	d9ea      	bls.n	80001ea <GPIO_PeriClockControl+0x22>
		break;
 8000214:	e019      	b.n	800024a <GPIO_PeriClockControl+0x82>
		for(char i=0; i<NUM_OF_GPIO; i++)
 8000216:	2300      	movs	r3, #0
 8000218:	73bb      	strb	r3, [r7, #14]
 800021a:	e012      	b.n	8000242 <GPIO_PeriClockControl+0x7a>
			if(i == PORT_num)
 800021c:	7bba      	ldrb	r2, [r7, #14]
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	429a      	cmp	r2, r3
 8000222:	d10b      	bne.n	800023c <GPIO_PeriClockControl+0x74>
				GPIO_PCLK_EN &= ~(1 << PORT_num);
 8000224:	490c      	ldr	r1, [pc, #48]	; (8000258 <GPIO_PeriClockControl+0x90>)
 8000226:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <GPIO_PeriClockControl+0x90>)
 8000228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800022a:	79fa      	ldrb	r2, [r7, #7]
 800022c:	2001      	movs	r0, #1
 800022e:	fa00 f202 	lsl.w	r2, r0, r2
 8000232:	43d2      	mvns	r2, r2
 8000234:	4013      	ands	r3, r2
 8000236:	630b      	str	r3, [r1, #48]	; 0x30
				break;
 8000238:	bf00      	nop
		break;
 800023a:	e005      	b.n	8000248 <GPIO_PeriClockControl+0x80>
		for(char i=0; i<NUM_OF_GPIO; i++)
 800023c:	7bbb      	ldrb	r3, [r7, #14]
 800023e:	3301      	adds	r3, #1
 8000240:	73bb      	strb	r3, [r7, #14]
 8000242:	7bbb      	ldrb	r3, [r7, #14]
 8000244:	2b08      	cmp	r3, #8
 8000246:	d9e9      	bls.n	800021c <GPIO_PeriClockControl+0x54>
		break;
 8000248:	bf00      	nop
}
 800024a:	bf00      	nop
 800024c:	3714      	adds	r7, #20
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	40023800 	.word	0x40023800

0800025c <GPIO_Init>:



// Modified
void GPIO_Init(uint8_t PORT_num , GPIO_pinconfig_t GPIO_pinconfig_1)
{
 800025c:	b590      	push	{r4, r7, lr}
 800025e:	b08d      	sub	sp, #52	; 0x34
 8000260:	af00      	add	r7, sp, #0
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	e883 0006 	stmia.w	r3, {r1, r2}
 8000268:	4603      	mov	r3, r0
 800026a:	73fb      	strb	r3, [r7, #15]
	uint32_t temp = 0;  //temp register
 800026c:	2300      	movs	r3, #0
 800026e:	62fb      	str	r3, [r7, #44]	; 0x2c

	//enable the peripheral clock

	GPIO_handle_t GPIO_handle;                 // these 2 variables used to void replacing all -> to . (To facilitate)
	GPIO_handle_t *pGPIOHandle = &GPIO_handle;
 8000270:	f107 0314 	add.w	r3, r7, #20
 8000274:	62bb      	str	r3, [r7, #40]	; 0x28


	pGPIOHandle-> pGPIOx = GPIO_Arr[PORT_num];     // new
 8000276:	7bfb      	ldrb	r3, [r7, #15]
 8000278:	4a62      	ldr	r2, [pc, #392]	; (8000404 <GPIO_Init+0x1a8>)
 800027a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800027e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000280:	601a      	str	r2, [r3, #0]
	pGPIOHandle-> GPIO_pinconfig = GPIO_pinconfig_1;
 8000282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000284:	3304      	adds	r3, #4
 8000286:	1d3a      	adds	r2, r7, #4
 8000288:	e892 0003 	ldmia.w	r2, {r0, r1}
 800028c:	6018      	str	r0, [r3, #0]
 800028e:	3304      	adds	r3, #4
 8000290:	8019      	strh	r1, [r3, #0]

	GPIO_PeriClockControl(PORT_num, ENABLE);
 8000292:	7bfb      	ldrb	r3, [r7, #15]
 8000294:	2101      	movs	r1, #1
 8000296:	4618      	mov	r0, r3
 8000298:	f7ff ff96 	bl	80001c8 <GPIO_PeriClockControl>

	//configure the mode of gpio pin
	if(pGPIOHandle->GPIO_pinconfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800029c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800029e:	795b      	ldrb	r3, [r3, #5]
 80002a0:	2b03      	cmp	r3, #3
 80002a2:	d820      	bhi.n	80002e6 <GPIO_Init+0x8a>
	{
		temp = (pGPIOHandle->GPIO_pinconfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber) );/* define as macros (discriptive)*/
 80002a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002a6:	795b      	ldrb	r3, [r3, #5]
 80002a8:	461a      	mov	r2, r3
 80002aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002ac:	791b      	ldrb	r3, [r3, #4]
 80002ae:	005b      	lsls	r3, r3, #1
 80002b0:	fa02 f303 	lsl.w	r3, r2, r3
 80002b4:	62fb      	str	r3, [r7, #44]	; 0x2c
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber ); /* define as macros*/
 80002b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80002bc:	6812      	ldr	r2, [r2, #0]
 80002be:	6812      	ldr	r2, [r2, #0]
 80002c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80002c2:	7909      	ldrb	r1, [r1, #4]
 80002c4:	4608      	mov	r0, r1
 80002c6:	2103      	movs	r1, #3
 80002c8:	4081      	lsls	r1, r0
 80002ca:	43c9      	mvns	r1, r1
 80002cc:	400a      	ands	r2, r1
 80002ce:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80002d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80002d6:	6812      	ldr	r2, [r2, #0]
 80002d8:	6811      	ldr	r1, [r2, #0]
 80002da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80002dc:	430a      	orrs	r2, r1
 80002de:	601a      	str	r2, [r3, #0]
		temp = 0;
 80002e0:	2300      	movs	r3, #0
 80002e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80002e4:	e0b8      	b.n	8000458 <GPIO_Init+0x1fc>
	}
	else
	{
		//this part for interrupt mode
		if(pGPIOHandle->GPIO_pinconfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80002e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002e8:	795b      	ldrb	r3, [r3, #5]
 80002ea:	2b04      	cmp	r3, #4
 80002ec:	d115      	bne.n	800031a <GPIO_Init+0xbe>
		{
			//configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber);
 80002ee:	4946      	ldr	r1, [pc, #280]	; (8000408 <GPIO_Init+0x1ac>)
 80002f0:	4b45      	ldr	r3, [pc, #276]	; (8000408 <GPIO_Init+0x1ac>)
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80002f6:	7912      	ldrb	r2, [r2, #4]
 80002f8:	4610      	mov	r0, r2
 80002fa:	2201      	movs	r2, #1
 80002fc:	4082      	lsls	r2, r0
 80002fe:	4313      	orrs	r3, r2
 8000300:	60cb      	str	r3, [r1, #12]
			//clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber);
 8000302:	4941      	ldr	r1, [pc, #260]	; (8000408 <GPIO_Init+0x1ac>)
 8000304:	4b40      	ldr	r3, [pc, #256]	; (8000408 <GPIO_Init+0x1ac>)
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800030a:	7912      	ldrb	r2, [r2, #4]
 800030c:	4610      	mov	r0, r2
 800030e:	2201      	movs	r2, #1
 8000310:	4082      	lsls	r2, r0
 8000312:	43d2      	mvns	r2, r2
 8000314:	4013      	ands	r3, r2
 8000316:	608b      	str	r3, [r1, #8]
 8000318:	e031      	b.n	800037e <GPIO_Init+0x122>
		}
		else if(pGPIOHandle->GPIO_pinconfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800031a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800031c:	795b      	ldrb	r3, [r3, #5]
 800031e:	2b05      	cmp	r3, #5
 8000320:	d115      	bne.n	800034e <GPIO_Init+0xf2>
		{
			//configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber);
 8000322:	4939      	ldr	r1, [pc, #228]	; (8000408 <GPIO_Init+0x1ac>)
 8000324:	4b38      	ldr	r3, [pc, #224]	; (8000408 <GPIO_Init+0x1ac>)
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800032a:	7912      	ldrb	r2, [r2, #4]
 800032c:	4610      	mov	r0, r2
 800032e:	2201      	movs	r2, #1
 8000330:	4082      	lsls	r2, r0
 8000332:	4313      	orrs	r3, r2
 8000334:	608b      	str	r3, [r1, #8]
			//clear the correspnding RISR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber);
 8000336:	4934      	ldr	r1, [pc, #208]	; (8000408 <GPIO_Init+0x1ac>)
 8000338:	4b33      	ldr	r3, [pc, #204]	; (8000408 <GPIO_Init+0x1ac>)
 800033a:	68db      	ldr	r3, [r3, #12]
 800033c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800033e:	7912      	ldrb	r2, [r2, #4]
 8000340:	4610      	mov	r0, r2
 8000342:	2201      	movs	r2, #1
 8000344:	4082      	lsls	r2, r0
 8000346:	43d2      	mvns	r2, r2
 8000348:	4013      	ands	r3, r2
 800034a:	60cb      	str	r3, [r1, #12]
 800034c:	e017      	b.n	800037e <GPIO_Init+0x122>
		}
		else if(pGPIOHandle->GPIO_pinconfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800034e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000350:	795b      	ldrb	r3, [r3, #5]
 8000352:	2b06      	cmp	r3, #6
 8000354:	d113      	bne.n	800037e <GPIO_Init+0x122>
		{
			//configure the FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber);
 8000356:	492c      	ldr	r1, [pc, #176]	; (8000408 <GPIO_Init+0x1ac>)
 8000358:	4b2b      	ldr	r3, [pc, #172]	; (8000408 <GPIO_Init+0x1ac>)
 800035a:	689b      	ldr	r3, [r3, #8]
 800035c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800035e:	7912      	ldrb	r2, [r2, #4]
 8000360:	4610      	mov	r0, r2
 8000362:	2201      	movs	r2, #1
 8000364:	4082      	lsls	r2, r0
 8000366:	4313      	orrs	r3, r2
 8000368:	608b      	str	r3, [r1, #8]

			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber);
 800036a:	4927      	ldr	r1, [pc, #156]	; (8000408 <GPIO_Init+0x1ac>)
 800036c:	4b26      	ldr	r3, [pc, #152]	; (8000408 <GPIO_Init+0x1ac>)
 800036e:	68db      	ldr	r3, [r3, #12]
 8000370:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000372:	7912      	ldrb	r2, [r2, #4]
 8000374:	4610      	mov	r0, r2
 8000376:	2201      	movs	r2, #1
 8000378:	4082      	lsls	r2, r0
 800037a:	4313      	orrs	r3, r2
 800037c:	60cb      	str	r3, [r1, #12]
		}

		//configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber / 4;
 800037e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000380:	791b      	ldrb	r3, [r3, #4]
 8000382:	089b      	lsrs	r3, r3, #2
 8000384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t temp2 = pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber % 4;
 8000388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800038a:	791b      	ldrb	r3, [r3, #4]
 800038c:	f003 0303 	and.w	r3, r3, #3
 8000390:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a1c      	ldr	r2, [pc, #112]	; (800040c <GPIO_Init+0x1b0>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d03c      	beq.n	8000418 <GPIO_Init+0x1bc>
 800039e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	4a1b      	ldr	r2, [pc, #108]	; (8000410 <GPIO_Init+0x1b4>)
 80003a4:	4293      	cmp	r3, r2
 80003a6:	d02b      	beq.n	8000400 <GPIO_Init+0x1a4>
 80003a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a19      	ldr	r2, [pc, #100]	; (8000414 <GPIO_Init+0x1b8>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d024      	beq.n	80003fc <GPIO_Init+0x1a0>
 80003b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a16      	ldr	r2, [pc, #88]	; (8000410 <GPIO_Init+0x1b4>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d01d      	beq.n	80003f8 <GPIO_Init+0x19c>
 80003bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a12      	ldr	r2, [pc, #72]	; (800040c <GPIO_Init+0x1b0>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d016      	beq.n	80003f4 <GPIO_Init+0x198>
 80003c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4a11      	ldr	r2, [pc, #68]	; (8000410 <GPIO_Init+0x1b4>)
 80003cc:	4293      	cmp	r3, r2
 80003ce:	d00f      	beq.n	80003f0 <GPIO_Init+0x194>
 80003d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a0d      	ldr	r2, [pc, #52]	; (800040c <GPIO_Init+0x1b0>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d008      	beq.n	80003ec <GPIO_Init+0x190>
 80003da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4a0c      	ldr	r2, [pc, #48]	; (8000410 <GPIO_Init+0x1b4>)
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d101      	bne.n	80003e8 <GPIO_Init+0x18c>
 80003e4:	2307      	movs	r3, #7
 80003e6:	e018      	b.n	800041a <GPIO_Init+0x1be>
 80003e8:	2300      	movs	r3, #0
 80003ea:	e016      	b.n	800041a <GPIO_Init+0x1be>
 80003ec:	2306      	movs	r3, #6
 80003ee:	e014      	b.n	800041a <GPIO_Init+0x1be>
 80003f0:	2305      	movs	r3, #5
 80003f2:	e012      	b.n	800041a <GPIO_Init+0x1be>
 80003f4:	2304      	movs	r3, #4
 80003f6:	e010      	b.n	800041a <GPIO_Init+0x1be>
 80003f8:	2303      	movs	r3, #3
 80003fa:	e00e      	b.n	800041a <GPIO_Init+0x1be>
 80003fc:	2302      	movs	r3, #2
 80003fe:	e00c      	b.n	800041a <GPIO_Init+0x1be>
 8000400:	2301      	movs	r3, #1
 8000402:	e00a      	b.n	800041a <GPIO_Init+0x1be>
 8000404:	20000000 	.word	0x20000000
 8000408:	40013c00 	.word	0x40013c00
 800040c:	40020000 	.word	0x40020000
 8000410:	40020400 	.word	0x40020400
 8000414:	40020800 	.word	0x40020800
 8000418:	2300      	movs	r3, #0
 800041a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 800041e:	485a      	ldr	r0, [pc, #360]	; (8000588 <GPIO_Init+0x32c>)
 8000420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000424:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8000428:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800042c:	0092      	lsls	r2, r2, #2
 800042e:	fa01 f202 	lsl.w	r2, r1, r2
 8000432:	3302      	adds	r3, #2
 8000434:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		SYSCFG_PCLK_EN;
 8000438:	4a54      	ldr	r2, [pc, #336]	; (800058c <GPIO_Init+0x330>)
 800043a:	4b54      	ldr	r3, [pc, #336]	; (800058c <GPIO_Init+0x330>)
 800043c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800043e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000442:	6453      	str	r3, [r2, #68]	; 0x44
		//enable the exti interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber);
 8000444:	4952      	ldr	r1, [pc, #328]	; (8000590 <GPIO_Init+0x334>)
 8000446:	4b52      	ldr	r3, [pc, #328]	; (8000590 <GPIO_Init+0x334>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800044c:	7912      	ldrb	r2, [r2, #4]
 800044e:	4610      	mov	r0, r2
 8000450:	2201      	movs	r2, #1
 8000452:	4082      	lsls	r2, r0
 8000454:	4313      	orrs	r3, r2
 8000456:	600b      	str	r3, [r1, #0]
	}

	temp = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	62fb      	str	r3, [r7, #44]	; 0x2c

	//configure the speed
	temp = (pGPIOHandle->GPIO_pinconfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber));
 800045c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800045e:	799b      	ldrb	r3, [r3, #6]
 8000460:	461a      	mov	r2, r3
 8000462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000464:	791b      	ldrb	r3, [r3, #4]
 8000466:	005b      	lsls	r3, r3, #1
 8000468:	fa02 f303 	lsl.w	r3, r2, r3
 800046c:	62fb      	str	r3, [r7, #44]	; 0x2c
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber );
 800046e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000474:	6812      	ldr	r2, [r2, #0]
 8000476:	6892      	ldr	r2, [r2, #8]
 8000478:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800047a:	7909      	ldrb	r1, [r1, #4]
 800047c:	4608      	mov	r0, r1
 800047e:	2103      	movs	r1, #3
 8000480:	4081      	lsls	r1, r0
 8000482:	43c9      	mvns	r1, r1
 8000484:	400a      	ands	r2, r1
 8000486:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800048e:	6812      	ldr	r2, [r2, #0]
 8000490:	6891      	ldr	r1, [r2, #8]
 8000492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000494:	430a      	orrs	r2, r1
 8000496:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000498:	2300      	movs	r3, #0
 800049a:	62fb      	str	r3, [r7, #44]	; 0x2c

	//configure the pupd setting
	temp = (pGPIOHandle->GPIO_pinconfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber) );
 800049c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800049e:	79db      	ldrb	r3, [r3, #7]
 80004a0:	461a      	mov	r2, r3
 80004a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004a4:	791b      	ldrb	r3, [r3, #4]
 80004a6:	005b      	lsls	r3, r3, #1
 80004a8:	fa02 f303 	lsl.w	r3, r2, r3
 80004ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber);  //clearing
 80004ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80004b4:	6812      	ldr	r2, [r2, #0]
 80004b6:	68d2      	ldr	r2, [r2, #12]
 80004b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80004ba:	7909      	ldrb	r1, [r1, #4]
 80004bc:	4608      	mov	r0, r1
 80004be:	2103      	movs	r1, #3
 80004c0:	4081      	lsls	r1, r0
 80004c2:	43c9      	mvns	r1, r1
 80004c4:	400a      	ands	r2, r1
 80004c6:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80004c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80004ce:	6812      	ldr	r2, [r2, #0]
 80004d0:	68d1      	ldr	r1, [r2, #12]
 80004d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80004d4:	430a      	orrs	r2, r1
 80004d6:	60da      	str	r2, [r3, #12]

	temp = 0;
 80004d8:	2300      	movs	r3, #0
 80004da:	62fb      	str	r3, [r7, #44]	; 0x2c

	//configure the optype
	temp = (pGPIOHandle->GPIO_pinconfig.GPIO_PinOPType << pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber);
 80004dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004de:	7a1b      	ldrb	r3, [r3, #8]
 80004e0:	461a      	mov	r2, r3
 80004e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004e4:	791b      	ldrb	r3, [r3, #4]
 80004e6:	fa02 f303 	lsl.w	r3, r2, r3
 80004ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber);
 80004ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80004f2:	6812      	ldr	r2, [r2, #0]
 80004f4:	6852      	ldr	r2, [r2, #4]
 80004f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80004f8:	7909      	ldrb	r1, [r1, #4]
 80004fa:	4608      	mov	r0, r1
 80004fc:	2101      	movs	r1, #1
 80004fe:	4081      	lsls	r1, r0
 8000500:	43c9      	mvns	r1, r1
 8000502:	400a      	ands	r2, r1
 8000504:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800050c:	6812      	ldr	r2, [r2, #0]
 800050e:	6851      	ldr	r1, [r2, #4]
 8000510:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000512:	430a      	orrs	r2, r1
 8000514:	605a      	str	r2, [r3, #4]

	//configure the alternate functionality
	if(pGPIOHandle->GPIO_pinconfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000518:	795b      	ldrb	r3, [r3, #5]
 800051a:	2b02      	cmp	r3, #2
 800051c:	d12f      	bne.n	800057e <GPIO_Init+0x322>
	{
		//alternate function
		uint8_t temp1,temp2;

		temp1 = pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber / 8;
 800051e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000520:	791b      	ldrb	r3, [r3, #4]
 8000522:	08db      	lsrs	r3, r3, #3
 8000524:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		temp2 = pGPIOHandle->GPIO_pinconfig.GPIO_PinNumber % 8;
 8000528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800052a:	791b      	ldrb	r3, [r3, #4]
 800052c:	f003 0307 	and.w	r3, r3, #7
 8000530:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2) ); //clearing
 8000534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800053c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800053e:	6809      	ldr	r1, [r1, #0]
 8000540:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8000544:	3008      	adds	r0, #8
 8000546:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800054a:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
 800054e:	0080      	lsls	r0, r0, #2
 8000550:	240f      	movs	r4, #15
 8000552:	fa04 f000 	lsl.w	r0, r4, r0
 8000556:	43c0      	mvns	r0, r0
 8000558:	4001      	ands	r1, r0
 800055a:	3208      	adds	r2, #8
 800055c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] = (pGPIOHandle->GPIO_pinconfig.GPIO_PinAltFunMode << (4 * temp2) ); //setting
 8000560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000568:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800056a:	7a49      	ldrb	r1, [r1, #9]
 800056c:	4608      	mov	r0, r1
 800056e:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8000572:	0089      	lsls	r1, r1, #2
 8000574:	fa00 f101 	lsl.w	r1, r0, r1
 8000578:	3208      	adds	r2, #8
 800057a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800057e:	bf00      	nop
 8000580:	3734      	adds	r7, #52	; 0x34
 8000582:	46bd      	mov	sp, r7
 8000584:	bd90      	pop	{r4, r7, pc}
 8000586:	bf00      	nop
 8000588:	40013800 	.word	0x40013800
 800058c:	40023800 	.word	0x40023800
 8000590:	40013c00 	.word	0x40013c00

08000594 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
  int i = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]

  GPIO_pinconfig_t GPIOA_Pin_Config = {0,0,0,0,0,0};   // pin num, pin_mode, pin_speed, pushpull,output type, alternate fun
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	809a      	strh	r2, [r3, #4]

  GPIO_Init( GPIOA_ , GPIOA_Pin_Config);
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80005ac:	2000      	movs	r0, #0
 80005ae:	f7ff fe55 	bl	800025c <GPIO_Init>



  while (1)
  {
	i++;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	3301      	adds	r3, #1
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	e7fb      	b.n	80005b2 <main+0x1e>
	...

080005bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005c2:	e003      	b.n	80005cc <LoopCopyDataInit>

080005c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005c4:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005ca:	3104      	adds	r1, #4

080005cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005cc:	480b      	ldr	r0, [pc, #44]	; (80005fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005d4:	d3f6      	bcc.n	80005c4 <CopyDataInit>
  ldr  r2, =_sbss
 80005d6:	4a0b      	ldr	r2, [pc, #44]	; (8000604 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005d8:	e002      	b.n	80005e0 <LoopFillZerobss>

080005da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005dc:	f842 3b04 	str.w	r3, [r2], #4

080005e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005e0:	4b09      	ldr	r3, [pc, #36]	; (8000608 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005e4:	d3f9      	bcc.n	80005da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005e6:	f000 f841 	bl	800066c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ea:	f000 f8f1 	bl	80007d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005ee:	f7ff ffd1 	bl	8000594 <main>
  bx  lr    
 80005f2:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005f4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80005f8:	08000838 	.word	0x08000838
  ldr  r0, =_sdata
 80005fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000600:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 8000604:	20000024 	.word	0x20000024
  ldr  r3, = _ebss
 8000608:	20000040 	.word	0x20000040

0800060c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800060c:	e7fe      	b.n	800060c <ADC_IRQHandler>

0800060e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr

0800061c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000620:	e7fe      	b.n	8000620 <HardFault_Handler+0x4>

08000622 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000626:	e7fe      	b.n	8000626 <MemManage_Handler+0x4>

08000628 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800062c:	e7fe      	b.n	800062c <BusFault_Handler+0x4>

0800062e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000632:	e7fe      	b.n	8000632 <UsageFault_Handler+0x4>

08000634 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr

08000642 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0
}
 8000646:	bf00      	nop
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr

0800065e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000662:	bf00      	nop
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000670:	4a16      	ldr	r2, [pc, #88]	; (80006cc <SystemInit+0x60>)
 8000672:	4b16      	ldr	r3, [pc, #88]	; (80006cc <SystemInit+0x60>)
 8000674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000678:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800067c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000680:	4a13      	ldr	r2, [pc, #76]	; (80006d0 <SystemInit+0x64>)
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <SystemInit+0x64>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f043 0301 	orr.w	r3, r3, #1
 800068a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800068c:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <SystemInit+0x64>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000692:	4a0f      	ldr	r2, [pc, #60]	; (80006d0 <SystemInit+0x64>)
 8000694:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <SystemInit+0x64>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800069c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006a0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <SystemInit+0x64>)
 80006a4:	4a0b      	ldr	r2, [pc, #44]	; (80006d4 <SystemInit+0x68>)
 80006a6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80006a8:	4a09      	ldr	r2, [pc, #36]	; (80006d0 <SystemInit+0x64>)
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <SystemInit+0x64>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <SystemInit+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80006ba:	f000 f80d 	bl	80006d8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006be:	4b03      	ldr	r3, [pc, #12]	; (80006cc <SystemInit+0x60>)
 80006c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c4:	609a      	str	r2, [r3, #8]
#endif
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	e000ed00 	.word	0xe000ed00
 80006d0:	40023800 	.word	0x40023800
 80006d4:	24003010 	.word	0x24003010

080006d8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	2300      	movs	r3, #0
 80006e4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80006e6:	4a36      	ldr	r2, [pc, #216]	; (80007c0 <SetSysClock+0xe8>)
 80006e8:	4b35      	ldr	r3, [pc, #212]	; (80007c0 <SetSysClock+0xe8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006f0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80006f2:	4b33      	ldr	r3, [pc, #204]	; (80007c0 <SetSysClock+0xe8>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006fa:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	3301      	adds	r3, #1
 8000700:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d103      	bne.n	8000710 <SetSysClock+0x38>
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800070e:	d1f0      	bne.n	80006f2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000710:	4b2b      	ldr	r3, [pc, #172]	; (80007c0 <SetSysClock+0xe8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000718:	2b00      	cmp	r3, #0
 800071a:	d002      	beq.n	8000722 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800071c:	2301      	movs	r3, #1
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	e001      	b.n	8000726 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000722:	2300      	movs	r3, #0
 8000724:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d142      	bne.n	80007b2 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800072c:	4a24      	ldr	r2, [pc, #144]	; (80007c0 <SetSysClock+0xe8>)
 800072e:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <SetSysClock+0xe8>)
 8000730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000736:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000738:	4a22      	ldr	r2, [pc, #136]	; (80007c4 <SetSysClock+0xec>)
 800073a:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <SetSysClock+0xec>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000742:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000744:	4a1e      	ldr	r2, [pc, #120]	; (80007c0 <SetSysClock+0xe8>)
 8000746:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <SetSysClock+0xe8>)
 8000748:	689b      	ldr	r3, [r3, #8]
 800074a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800074c:	4a1c      	ldr	r2, [pc, #112]	; (80007c0 <SetSysClock+0xe8>)
 800074e:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <SetSysClock+0xe8>)
 8000750:	689b      	ldr	r3, [r3, #8]
 8000752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000756:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000758:	4a19      	ldr	r2, [pc, #100]	; (80007c0 <SetSysClock+0xe8>)
 800075a:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <SetSysClock+0xe8>)
 800075c:	689b      	ldr	r3, [r3, #8]
 800075e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000762:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000764:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <SetSysClock+0xe8>)
 8000766:	4a18      	ldr	r2, [pc, #96]	; (80007c8 <SetSysClock+0xf0>)
 8000768:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800076a:	4a15      	ldr	r2, [pc, #84]	; (80007c0 <SetSysClock+0xe8>)
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <SetSysClock+0xe8>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000774:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000776:	bf00      	nop
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <SetSysClock+0xe8>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000780:	2b00      	cmp	r3, #0
 8000782:	d0f9      	beq.n	8000778 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <SetSysClock+0xf4>)
 8000786:	f240 7205 	movw	r2, #1797	; 0x705
 800078a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800078c:	4a0c      	ldr	r2, [pc, #48]	; (80007c0 <SetSysClock+0xe8>)
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <SetSysClock+0xe8>)
 8000790:	689b      	ldr	r3, [r3, #8]
 8000792:	f023 0303 	bic.w	r3, r3, #3
 8000796:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000798:	4a09      	ldr	r2, [pc, #36]	; (80007c0 <SetSysClock+0xe8>)
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <SetSysClock+0xe8>)
 800079c:	689b      	ldr	r3, [r3, #8]
 800079e:	f043 0302 	orr.w	r3, r3, #2
 80007a2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80007a4:	bf00      	nop
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <SetSysClock+0xe8>)
 80007a8:	689b      	ldr	r3, [r3, #8]
 80007aa:	f003 030c 	and.w	r3, r3, #12
 80007ae:	2b08      	cmp	r3, #8
 80007b0:	d1f9      	bne.n	80007a6 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40007000 	.word	0x40007000
 80007c8:	07405419 	.word	0x07405419
 80007cc:	40023c00 	.word	0x40023c00

080007d0 <__libc_init_array>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	4e0d      	ldr	r6, [pc, #52]	; (8000808 <__libc_init_array+0x38>)
 80007d4:	4c0d      	ldr	r4, [pc, #52]	; (800080c <__libc_init_array+0x3c>)
 80007d6:	1ba4      	subs	r4, r4, r6
 80007d8:	10a4      	asrs	r4, r4, #2
 80007da:	2500      	movs	r5, #0
 80007dc:	42a5      	cmp	r5, r4
 80007de:	d109      	bne.n	80007f4 <__libc_init_array+0x24>
 80007e0:	4e0b      	ldr	r6, [pc, #44]	; (8000810 <__libc_init_array+0x40>)
 80007e2:	4c0c      	ldr	r4, [pc, #48]	; (8000814 <__libc_init_array+0x44>)
 80007e4:	f000 f818 	bl	8000818 <_init>
 80007e8:	1ba4      	subs	r4, r4, r6
 80007ea:	10a4      	asrs	r4, r4, #2
 80007ec:	2500      	movs	r5, #0
 80007ee:	42a5      	cmp	r5, r4
 80007f0:	d105      	bne.n	80007fe <__libc_init_array+0x2e>
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80007f8:	4798      	blx	r3
 80007fa:	3501      	adds	r5, #1
 80007fc:	e7ee      	b.n	80007dc <__libc_init_array+0xc>
 80007fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000802:	4798      	blx	r3
 8000804:	3501      	adds	r5, #1
 8000806:	e7f2      	b.n	80007ee <__libc_init_array+0x1e>
 8000808:	08000830 	.word	0x08000830
 800080c:	08000830 	.word	0x08000830
 8000810:	08000830 	.word	0x08000830
 8000814:	08000834 	.word	0x08000834

08000818 <_init>:
 8000818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800081a:	bf00      	nop
 800081c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800081e:	bc08      	pop	{r3}
 8000820:	469e      	mov	lr, r3
 8000822:	4770      	bx	lr

08000824 <_fini>:
 8000824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000826:	bf00      	nop
 8000828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800082a:	bc08      	pop	{r3}
 800082c:	469e      	mov	lr, r3
 800082e:	4770      	bx	lr
